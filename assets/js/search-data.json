{
  
    
        "post0": {
            "title": "India (Death cases)",
            "content": "Covid-19 prediction model . In December 2019, China found the first patient infected with Covid-19(Coronavirus Disease 19). The virus is the member of novel corona viruses. The pa-tient has reportedly catch the virus from sea food market in Wuhan which is theepicenter of Covid-19. Since then Covid-19 have spread all over the world. On 11 March 2020, World Health Organization declared Covid-19 as Pan-demic. . Since then coronavius is teroorising almost every country. Steps such as lockdown and qurantine have become imperative. But how exactly aer these measures shaping the curve and what impact it will do on the future trend can be studied using certain curves. Here we try to fit the cumulative cases to these curves. Fitting can be done using standard least-square method, but we will use scipy&#39;s curve_fit method. Scipy uses lm() method to fit the curves to data. . This model is based on the reseasch paper &quot;Prediction and analysis of Coronavirus Disease 2019&quot; by LinJia, Keen Li, Yu Jiang, Xin Guo, Ting Zhao They tested their model on the trend of SARS disease. Since the SARS and Covid-19 are both coronavirsu, these same model can be implemneted here. Lets now introduce the 3 types of curve we will be fitting. . Logistic fuction | . A logistic function or logistic curve is a common S-shaped curve (sigmoid curve). It is commonly to explore the risk factors of a certain disease, and predict the probability of occurrence of a certain disease according to the risk factors. begin{align} f(x) = frac{a}{1+e^{b-c(t-t_0)}} end{align} . Bertalanffy function | . Bertalanffy model is often used as a growth model. It is used to describe the growth characteristics of fish. Other species can also be used to describe the growth of animals, such as pigs, horses, cattle, sheep, etc. and other infectious diseases. begin{align} f(x) = a(1-e^{-b(t-t_0)})^c end{align} . Gompertz function | . The model was originally proposed by Gomperts (Gompertz,1825) as an animal population growth model to describe the extinction law of the population. The development of infectious diseases is similar to the growth of individuals and populations. begin{align} f(x) = ae^{-be^{-c(t-t_0)}} end{align} . In above models,Qtis confirmed cases, a is predicted maximum confirmed casesb and c are hyper-parameter. t is number of days since first case is reported.t0is day on which first case occurred. . Dont worry if these names seems unfaimliar to you. I will give brief intro to all of them. First lets define what are epidemiological fuctions. . Importing essesntial librabies. . import pandas as pd import numpy as np import matplotlib.pyplot as plt from scipy.optimize import curve_fit . def f_sigmoid(x, a, b, c): # c = sigmoid midpoint # b = curve steepness (logistic growth) # a = max value return (c / (1 + np.exp(b-a*(x-x_0)))) def Bertalanffy(x, a, b, c): # a = max value # b,c = function parameter return a*np.sign(1 - np.exp(-b*(x-x_0)))*np.abs(1 - np.exp(-b*(x-x_0)))**c def Gompertz(x, a, b, c): # a = max value # b,c = function parameter return a*np.exp(-b*np.exp(-c*(x-x_0))) def r2(y,y_hat): return 1-(np.sum((y-y_hat)**2)/np.sum((y - np.mean(y))**2)) . data = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;India&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] cases = np.array(df.sum(axis = 0))[4:] #df=np.array(df) #cases = df[:,4:] #starting from non-zero case cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] print(cases,cases.size) plt.scatter(date,cases,label=&quot;India&quot;) plt.xlabel(&quot;Dates from 11/3/2020&quot;) plt.ylabel(&quot;Total Deaths&quot;) plt.legend() . [0 0 0 0 0 0 0 0 1 1 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 28 30 31 34 39 43 56 62 73 82 102 113 119 142 156 194 244 330 396 499 536 657 727 887 987 1024 1251 1397 1998 2543 2567 3082 3588 4778 5311 5916 6725 7598 8446 9205 10453 11487 12322 13430 14352 15722 17615 18539 20080 21370 23077 24530 26283 27890 29451 31324 33062 34863 37257 39699 42505 46437 49400 52987 56351 59695 62808 67161 70768 74292 78055 81997 85784 90648 95698] 117 . &lt;matplotlib.legend.Legend at 0x12b8ae70&gt; . sigmoid = pd.DataFrame(columns=[&#39;date&#39;,&#39;real&#39;,&#39;pred&#39;]) n=2 for i in range(50,cases.size-n): extra_date = np.linspace(1,500,500) try: popt_sig, pcov_sig = curve_fit(f_sigmoid, date[:i], cases[:i]) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) #print(ans2) #print(ans1[i],cases[i]) sigmoid = sigmoid.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[ans1[i+n]]})) #plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) except RuntimeError: #print(&quot;lo&quot;) sigmoid = sigmoid.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[cases[i+n]]})) continue #plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.xlabel(&quot;Dates from 10/3/2020&quot;) #plt.ylabel(&quot;Total Deaths India&quot;) #plt.legend() plt.plot(np.array(sigmoid)[:,0], np.array(sigmoid)[:,1],&#39;.&#39;,color =&#39;red&#39;, label =&quot;data&quot;) plt.plot(np.array(sigmoid)[:,0], np.array(sigmoid)[:,2],&#39;.&#39;,color =&#39;green&#39;, label =&quot;data&quot;) plt.show() . c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp &#34;&#34;&#34; . np.mean((np.array(sigmoid)[:,1] - np.array(sigmoid)[:,2])/np.array(sigmoid)[:,1]) . 0.32007489474678974 . bertalanffy = pd.DataFrame(columns=[&#39;date&#39;,&#39;real&#39;,&#39;pred&#39;]) n=10 for i in range(50,cases.size-n): extra_date = np.linspace(1,500,500) try: popt_sig, pcov_sig = curve_fit(Bertalanffy, date[:i], cases[:i]) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] #print(ans2) #print(ans2[i],cases[i]) bertalanffy = bertalanffy.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[ans2[i+n]]})) #plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) except RuntimeError: #print(&quot;be&quot;) bertalanffy = bertalanffy.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[cases[i+n]]})) continue #plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) #plt.xlabel(&quot;Dates from 11/3/2020&quot;) #plt.ylabel(&quot;Total Deaths India&quot;) #plt.legend() #plt.show() plt.plot(np.array(bertalanffy)[:,0], np.array(bertalanffy)[:,1],&#39;.&#39;,color =&#39;red&#39;, label =&quot;data&quot;) plt.plot(np.array(bertalanffy)[:,0], np.array(bertalanffy)[:,2],&#39;.&#39;,color =&#39;green&#39;, label =&quot;data&quot;) plt.show() . c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in exp if __name__ == &#39;__main__&#39;: c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in power if __name__ == &#39;__main__&#39;: c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in multiply if __name__ == &#39;__main__&#39;: . np.mean((np.array(bertalanffy)[:,1] - np.array(bertalanffy)[:,2])/np.array(bertalanffy)[:,1]) . 0.10087436273030098 . gompertz = pd.DataFrame(columns=[&#39;date&#39;,&#39;real&#39;,&#39;pred&#39;]) n=2 for i in range(50,cases.size-n): extra_date = np.linspace(1,300,300) try: popt_sig, pcov_sig = curve_fit(Gompertz, date[:i], cases[:i]) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) #print(popt_sig) #print(ans3[i],cases[i]) gompertz = gompertz.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[ans3[i+n]]})) #plt.plot(extra_date, ans3, &#39;--&#39;, color =&quot;blue&quot;, label =&quot;Gompertz&quot;) except RuntimeError: gompertz = gompertz.append(pd.DataFrame({&#39;date&#39;:[i],&#39;real&#39;:[cases[i+n]],&#39;pred&#39;:[cases[i+n]]})) #print(&quot;Go&quot;) continue #plt.plot(date, cases[:],&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) #plt.xlabel(&quot;Dates from 11/3/2020&quot;) #plt.ylabel(&quot;Total Deaths India&quot;) #plt.legend() #plt.show() plt.plot(np.array(gompertz)[:,0], np.array(gompertz)[:,1],&#39;.&#39;,color =&#39;red&#39;, label =&quot;data&quot;) plt.plot(np.array(gompertz)[:,0], np.array(gompertz)[:,2],&#39;.&#39;,color =&#39;green&#39;, label =&quot;data&quot;) plt.show() . c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:13: RuntimeWarning: overflow encountered in exp del sys.path[0] c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:13: RuntimeWarning: overflow encountered in multiply del sys.path[0] . gompertz . date real pred . 0 50 | 102 | 72.845425 | . 0 51 | 113 | 91.582561 | . 0 52 | 119 | 106.107457 | . 0 53 | 142 | 139.516154 | . 0 54 | 156 | 159.773681 | . 0 55 | 194 | 163.890122 | . 0 56 | 244 | 188.601523 | . 0 57 | 330 | 207.985933 | . 0 58 | 396 | 260.417846 | . 0 59 | 499 | 499.000000 | . 0 60 | 536 | 536.000000 | . 0 61 | 657 | 657.000000 | . 0 62 | 727 | 727.000000 | . 0 63 | 887 | 887.000000 | . 0 64 | 987 | 987.000000 | . 0 65 | 1024 | 1024.000000 | . 0 66 | 1251 | 1251.000000 | . 0 67 | 1397 | 1397.000000 | . 0 68 | 1998 | 1545.410291 | . 0 69 | 2543 | 1763.321501 | . 0 70 | 2567 | 2567.000000 | . 0 71 | 3082 | 3082.000000 | . 0 72 | 3588 | 3588.000000 | . 0 73 | 4778 | 4778.000000 | . 0 74 | 5311 | 5311.000000 | . 0 75 | 5916 | 5916.000000 | . 0 76 | 6725 | 6725.000000 | . 0 77 | 7598 | 7598.000000 | . 0 78 | 8446 | 8446.000000 | . 0 79 | 9205 | 9205.000000 | . 0 80 | 10453 | 11588.260143 | . 0 81 | 11487 | 12405.243710 | . 0 82 | 12322 | 13028.603945 | . 0 83 | 13430 | 14229.230379 | . 0 84 | 14352 | 15384.387939 | . 0 85 | 15722 | 16235.522151 | . 0 86 | 17615 | 17232.198239 | . 0 87 | 18539 | 18100.298264 | . 0 88 | 20080 | 19322.753055 | . 0 89 | 21370 | 21219.372671 | . 0 90 | 23077 | 22611.089345 | . 0 91 | 24530 | 24197.368154 | . 0 92 | 26283 | 25672.079146 | . 0 93 | 27890 | 27383.594942 | . 0 94 | 29451 | 29033.248122 | . 0 95 | 31324 | 30838.572368 | . 0 96 | 33062 | 32625.230417 | . 0 97 | 34863 | 34350.711814 | . 0 98 | 37257 | 36218.610812 | . 0 99 | 39699 | 38086.426610 | . 0 100 | 42505 | 39977.374996 | . 0 101 | 46437 | 42208.920110 | . 0 102 | 49400 | 44698.346477 | . 0 103 | 52987 | 47560.092302 | . 0 104 | 56351 | 51309.586379 | . 0 105 | 59695 | 55178.156507 | . 0 106 | 62808 | 59434.828298 | . 0 107 | 67161 | 63808.671743 | . 0 108 | 70768 | 68197.233884 | . data = pd.read_csv(&#39;time_series_covid19_deaths_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;India&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Saint Pierre and Miquelon&#39;] df=np.array(df) cases = df[:,4:] #starting from non-zero case cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] print(cases) plt.scatter(date,cases,label=&quot;India&quot;) plt.xlabel(&quot;Dates from 11/3/2020&quot;) plt.ylabel(&quot;Total Deaths&quot;) plt.legend() . [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 3 3 4 5 4 7 10 10 12 20 20 24 27 32 35 58 72 72 86 99 136 150 178 226 246 288 331 358 393 405 448 486 521 559 592 645 681 721 780 825 881 939 1008 1079 1154 1223 1323 1391 1566 1693 1785 1889 1985 2101 2212 2294 2415] . &lt;matplotlib.legend.Legend at 0x5b81cd0&gt; . extra_date = np.linspace(1,300,300) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases,p0=[1, 1, np.max(cases)]) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) print(popt_sig) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] print(popt_sig) popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) print(popt_sig) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 11/3/2020&quot;) plt.ylabel(&quot;Total Deaths India&quot;) plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) . [9.38036463e-02 1.04649820e+01 4.73351246e+03] [5.48336694e+04 1.54063319e-02 1.58646115e+01] [3.22837596e+04 2.50329045e+01 2.02792967e-02] . c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in exp if __name__ == &#39;__main__&#39;: c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in power if __name__ == &#39;__main__&#39;: c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:13: RuntimeWarning: overflow encountered in exp del sys.path[0] c: users divay sharma appdata local programs python python37-32 lib site-packages ipykernel_launcher.py:13: RuntimeWarning: overflow encountered in multiply del sys.path[0] . R2 score 0.9977982241697563 . #last 10 prediction from each model. print(ans1[-10:]) print(ans2[-10:]) print(ans3[-10:]) ans1[118] . [ 69922.83137544 73398.13290452 76890.70775816 80386.47134404 83871.2876064 87331.19687713 90752.63771921 94122.65534672 97429.08997498 100660.73957728] [ 70154.27458776 74042.39422597 78075.09253601 82254.26699878 86581.71000706 91059.10629115 95688.03058112 100469.94550623 105406.1997318 110498.02633241] [ 70086.45379296 73925.18393245 77897.37464935 82003.65601265 86244.48978473 90620.16839793 95130.8144371 99776.38061951 104556.65026116 109471.23821696] . 97429.08997498306 . India (Confirmed cases) . data = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;India&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Saint Pierre and Miquelon&#39;] df=np.array(df) cases = df[:,4:] cases = cases.T.reshape(cases.size)[8:] date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] plt.scatter(date,cases,label=&quot;India&quot;) plt.xlabel(&quot;Dates from 30/1/2020&quot;) plt.ylabel(&quot;Total Confirmed cases&quot;) plt.legend() . extra_date = np.linspace(1,300,300) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases) print(popt_sig) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) print(popt_sig) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) print(popt_sig) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 3/11/2020&quot;) plt.ylabel(&quot;Total Confirmed cases India&quot;) plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) . Hong Kong (confirmed cases) . data = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;China&#39;] df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] plt.scatter(date,cases,label=&quot;Hong Kong&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Confirmed cases&quot;) plt.legend() . extra_date = np.linspace(1,150,150) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases) print(popt_sig) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) print(popt_sig) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) print(popt_sig) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Confirmed cases Hong Kong&quot;) plt.legend() plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) . Hong Kong (death cases) . data = pd.read_csv(&#39;time_series_covid19_deaths_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;China&#39;] df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] plt.scatter(date,cases,label=&quot;Hong Kong&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Deaths&quot;) plt.legend() . extra_date = np.linspace(1,150,150) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases) print(popt_sig) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) print(popt_sig) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) print(popt_sig) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Deaths Hong Kong&quot;) plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) . Countries Comparison (confirmed cases) . data = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;India&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Saint Pierre and Miquelon&#39;] df=np.array(df) cases = df[:,4:] cases_ind = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) df=data[data[&#39;Country/Region&#39;]==&#39;Italy&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases_it = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) df=data[data[&#39;Country/Region&#39;]==&#39;Iran&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases_us= cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) df=data[data[&#39;Country/Region&#39;]==&#39;Germany&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases_ger = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) plt.plot(date,cases_us,label=&quot;Iran&quot;) plt.plot(date,cases_ger,label=&quot;Germany&quot;) plt.plot(date,cases_ind,label=&quot;India&quot;) plt.plot(date,cases_it,label=&quot;Italy&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Confirmed cases&quot;) plt.legend() . extra_date = np.linspace(1,250,250) popt_sig, pcov_sig = curve_fit(Gompertz, date, cases_ger) ans1 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) popt_sig, pcov_sig = curve_fit(Gompertz, date, cases_us) ans2 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) popt_sig, pcov_sig = curve_fit(Gompertz, date, cases_ind) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases_it) ans11 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases_it) ans21 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases_it) ans31 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases_ger,&#39;.&#39;,color =&#39;yellow&#39;) #plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) #plt.plot(extra_date, ans21, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Germany&quot;) plt.plot(date, cases_us,&#39;.&#39;,color =&#39;yellow&#39;) #plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) #plt.plot(extra_date, ans21, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;orange&#39;, label =&quot;Iran&quot;) plt.plot(date, cases_it,&#39;.&#39;,color =&#39;yellow&#39;) #plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) #plt.plot(extra_date, ans21, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans31, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Italy&quot;) plt.plot(date, cases_ind,&#39;.&#39;,color =&#39;yellow&#39;) #plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) #plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;India&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Confirmed cases&quot;) plt.legend() plt.show() print(r2(cases,ans1[:cases.size])) . Italy (confirmed cases) . data = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;Italy&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] plt.scatter(date,cases,label=&quot;Italy&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Confirmed cases&quot;) plt.legend() . extra_date = np.linspace(1,250,250) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases) print(popt_sig) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) print(popt_sig) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) print(popt_sig) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total Confirmed cases Italy&quot;) plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) . Italy (death cases) . data = pd.read_csv(&#39;time_series_covid19_deaths_global.csv&#39;) df=data[data[&#39;Country/Region&#39;]==&#39;Italy&#39;] #df=df[df[&#39;Province/State&#39;]==&#39;Hong Kong&#39;] df=np.array(df) cases = df[:,4:] cases = cases.T.reshape(cases.size) date = np.linspace(1,cases.size,cases.size) x_0 = cases[0] plt.scatter(date,cases,label=&quot;Italy&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total deaths cases&quot;) plt.legend() . extra_date = np.linspace(1,250,250) popt_sig, pcov_sig = curve_fit(f_sigmoid, date, cases) print(popt_sig) ans1 = (popt_sig[2] / (1 + np.exp(popt_sig[1]-(extra_date*popt_sig[0])))) popt_sig, pcov_sig = curve_fit(Bertalanffy, date, cases) print(popt_sig) ans2 = popt_sig[0]*(1 - np.exp(-popt_sig[1]*extra_date))**popt_sig[2] popt_sig, pcov_sig = curve_fit(Gompertz, date, cases) print(popt_sig) ans3 = popt_sig[0]*np.exp(-popt_sig[1]*np.exp(-popt_sig[2]*extra_date)) plt.plot(date, cases,&#39;.&#39;,color =&#39;yellow&#39;, label =&quot;data&quot;) plt.plot(extra_date, ans1, &#39;--&#39;, color =&#39;blue&#39;, label =&quot;sigmoid&quot;) plt.plot(extra_date, ans2, &#39;--&#39;, color =&#39;green&#39;, label =&quot;Bertalanffy&quot;) plt.plot(extra_date, ans3, &#39;--&#39;, color =&#39;red&#39;, label =&quot;Gompertz&quot;) plt.xlabel(&quot;Dates from 22/1/2020&quot;) plt.ylabel(&quot;Total deaths cases Italy&quot;) plt.legend() plt.show() print(&quot;R2 score&quot;,r2(cases,ans1[:cases.size])) .",
            "url": "https://divay9sharma.github.io/Covid-19-Prediction/2020/05/18/Covid.html",
            "relUrl": "/2020/05/18/Covid.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://divay9sharma.github.io/Covid-19-Prediction/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://divay9sharma.github.io/Covid-19-Prediction/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://divay9sharma.github.io/Covid-19-Prediction/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://divay9sharma.github.io/Covid-19-Prediction/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}